//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Laboratorium 06
//  @ File Name : System.cpp
//  @ Date : 30.05.2023
//  @ Author : Tomasz Wnuk
//
//

#include <iostream>
#include <string>
#include <vector>
#include "System.h"
#include "User.h"

using namespace std;

string System::getName() {
    return name;
}

void System::setName(string name) {
    this->name = name;
}

string System::getTechnology() {
    return technology;
}

void System::setTechnology(string technology) {
    this->technology = technology;
}

string System::getPerformance() {
    return performance;
}

void System::setPerformance(string performance) {
    this->performance = performance;
}

string System::getFunctionality() {
    return functionality;
}

void System::setFunctionality(string functionality) {
    this->functionality = functionality;
}

string System::getSecurity() {
    return security;
}

void System::setSecurity(string security) {
    this->security = security;
}

System::System(string name, string technology, string performance, string functionality, string security) {
    setName(name);
    setTechnology(technology);
    setPerformance(performance);
    setFunctionality(functionality);
    setSecurity(security);
}

System::~System() {}

bool System::authentication(string userId, string userPassword) {
    for(int i = 0; i < users.size(); i++) {
        if((users[i]->getId() == userId) && (users[i]->getPassword() == userPassword)) {
            return true;
        }
    }
    return false;
}

void System::addUser(User user) {
    users.push_back(&user);
    cout << "User " << user.getName() << " has been added" << endl;
}

void System::printUser(User * user) {
    for(int i = 0; i < users.size(); i++) {
        if((users[i]->getId() == user->getId()) &&
                (users[i]->getPassword() == user->getPassword()) &&
                (users[i]->getName() == user->getName()) &&
                (users[i]->getSurname() == user->getSurname()) &&
                (users[i]->getEmail() == user->getEmail())) {
            string userPassword = users[i]->getPassword();
            userPassword.replace(0, userPassword.length(), userPassword.length(), '*');
            cout << "User: " << users[i]->getId() << endl;
            cout << "Password: " << userPassword << endl;
            cout << "Name: " << users[i]->getName() << endl;
            cout << "Surname: " << users[i]->getSurname() << endl;
            cout << "Email: " << users[i]->getEmail() << endl;
        }
    }
}

void System::deleteUser(User user) {
    for(int i = 0; i < users.size(); i++) {
        if(users[i] == &user) {
            users.erase(users.begin() + i);
        }
    }
    cout << "User " << user.getName() << " has been deleted" << endl;
}

void System::boot() {
    // Create user
    // User parameters: id: string, password: string, name: string, surname: string, email: string
    User user = User("jan", "123", "Jan", "Kowalski", "jan.mail.com");

    // Add user to system
    addUser(user);

    // Loop for logging in user
    bool running = true;
    while(running) {
        // Log in user
        auto userData = user.logIn();
        string userId = userData.first;
        string userPassword = userData.second;

        // Authenticate user
        if(authentication(userId, userPassword)) {
            cout << "User " << userId << " has been authenticated." << endl;
            // Open home page
            user.openHomePage();
            // Print user
            printUser(&user);
            // Register user
        } else {
            cout << "User " << userId << " has not been authenticated." << endl;
            // Register user
            user.registerUser();
            // Add user to system
            addUser(user);
            // Print user
            printUser(&user);
        }

        string userInput;
        // Ask user if he wants to continue
        while(true) {
            // Ask user if he wants to continue
            cout << "Do you want to continue (y/n): ";
            // Get user input
            cin >> userInput;

            // Check user input
            // If user wants to continue, set running to true
            if(userInput == "y") {
                running = true;
                break;
            // If user wants to exit, set running to false
            } else if(userInput == "n") {
                running = false;
                break;
            // If user input is wrong, print error message
            } else {
                cout << "Wrong input" << endl;
            }
        }
    }
}
