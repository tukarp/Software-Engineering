//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Laboratorium 04b
//  @ File Name : Company.cpp
//  @ Date : 30.05.2023
//  @ Author : Tomasz Wnuk
//
//

#include <iostream>
#include <string>

#include "Company.h"

using namespace std;

string Company::getName() {
    return name;
}

void Company::setName(string name) {
    this->name = name;
}

string Company::getSpecialization() {
    return specialization;
}

void Company::setSpecialization(string specialization) {
    this->specialization = specialization;
}

int Company::getYearsOnTheMarket() {
    return yearsOnTheMarket;
}

void Company::setYearsOnTheMarket(int yearsOnTheMarket) {
    this->yearsOnTheMarket = yearsOnTheMarket;
}

int Company::getNumberOfEmployees() {
    return numberOfEmployees;
}

void Company::setNumberOfEmployees(int numberOfEmployees) {
    this->numberOfEmployees = numberOfEmployees;
}

int Company::getAnnualRevenue() {
    return annualRevenue;
}

void Company::setAnnualRevenue(int annualRevenue) {
    this->annualRevenue = annualRevenue;
}

Company::Company(string name, string specialization, int yearsOnTheMarket, int numberOfEmployees, int annualRevenue) {
    setName(name);
    setSpecialization(specialization);
    setYearsOnTheMarket(yearsOnTheMarket);
    setNumberOfEmployees(numberOfEmployees);
    setAnnualRevenue(annualRevenue);
}

Company::~Company() {}

void Company::hireEmployee() {
    cout << "Hiring employee..." << endl;
}

void Company::earnMoney() {
    cout << "Earning money..." << endl;
    annualRevenue += 1000000;
}

void Company::fireEmployee() {
    cout << "Firing employee..." << endl;
}

void Company::attachEmployee(Employee * employee) {
    employees.push_back(employee);
    cout << "Employee " << employee->getFirstName() << " " << employee->getLastName << " attached to " << name << endl;
}

void Company::detachEmployee(Employee * employee) {
    for (int i = 0; i < employees.size(); i++) {
        if (employees[i] == employee) {
            employees.erase(employees.begin() + i);
            break;
        }
    }
    cout << "Employee " << employee->getFirstName() << " " << employee->getLastName << " detached from " << name << endl;
}

void Company::printEmployee(Employee * employee) {
    cout << "Name: " << employee->getFirstName() << endl;
    cout << "Specialization: " << employee->getLastName() << endl;
    cout << "Years on the market: " << employee->getPosition() << endl;
    cout << "Number of employees: " << employee->getSpecialization() << endl;
    cout << "Annual revenue: " << employee->getExperience() << endl;
    cout << endl;
}
